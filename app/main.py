# generated by fastapi-codegen:
#   filename:  petstore-expanded.yaml
#   timestamp: 2022-06-19T14:10:41+00:00

from __future__ import annotations

from typing import List, Optional, Union

from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

from models import Error, NewPet, Pet

app = FastAPI(
    version='1.0.0',
    title='Swagger Petstore',
    description='A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification',
    termsOfService='http://swagger.io/terms/',
    contact={
        'name': 'Swagger API Team',
        'email': 'apiteam@swagger.io',
        'url': 'http://swagger.io',
    },
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    servers=[{'url': 'http://petstore.swagger.io/api'}],
)


# リクエストのschema validation 失敗時のレスポンスをカスタマイズする。
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    # 例
    # - [{'loc': ('body', 'name'), 'msg': 'field required', 'type': 'value_error.missing'}]
    # - [{'loc': ('body', 13), 'msg': "Expecting ',' delimiter: line 1 column 14 (char 13)", 'type': 'value_error.jsondecode', 'ctx': {'msg': "Expecting ',' delimiter", 'doc': '{"foo": "bar"', 'pos': 13, 'lineno': 1, 'colno': 14}}]
    print(exc.errors())
    error = exc.errors()[0]
    return JSONResponse(
        status_code=400,
        content={"message": f"{error['msg']}"}
    )

@app.get('/pets', response_model=List[Pet], responses={'default': {'model': Error}})
def find_pets(
    tags: Optional[List[str]] = None, limit: Optional[int] = None
) -> Union[List[Pet], Error]:
    pass


@app.post('/pets', response_model=Pet, responses={'default': {'model': Error}})
def add_pet(body: NewPet) -> Union[Pet, Error]:
    print('here')
    pass


@app.get('/pets/{id}', response_model=Pet, responses={'default': {'model': Error}})
def find_pet_by_id(id: int) -> Union[Pet, Error]:
    pass


@app.delete('/pets/{id}', response_model=None, responses={'default': {'model': Error}})
def delete_pet(id: int) -> Union[None, Error]:
    pass
